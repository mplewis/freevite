datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  editToken    String @unique
  previewToken String @unique

  ownerEmail String
  confirmed  Boolean @default(false)
  visible    Boolean @default(false)

  slug        String @unique
  title       String
  description String
  location    String @default("")

  // Start and end are ALWAYS stored as UTC times! They are not related to timezone!
  // Do not convert start or end times through timezone before storing. Store them as UTC.
  start DateTime
  end   DateTime

  // This timezone is ONLY used for user-facing presentation, e.g. the Open Graph preview images.
  // Null values are unset and should be treated as UTC.
  timezone String?

  responseConfig ResponseConfig @default(DISABLED)
  responses      Response[]

  notiResponseCreated Boolean @default(true)
  notiResponseDeleted Boolean @default(true)
}

enum ResponseConfig {
  SHOW_ALL
  SHOW_COUNTS_ONLY
  SHOW_NONE
  DISABLED
}

model Response {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int

  name      String  @default("")
  editToken String  @unique
  email     String
  confirmed Boolean @default(false)
  headCount Int     @default(1)
  comment   String  @default("")

  reminders Reminder[]

  notiEventUpdated Boolean @default(true)
  notiEventDeleted Boolean @default(true)

  @@unique([eventId, email])
}

model Reminder {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId Int

  sendAt DateTime
  sent   Boolean  @default(false)
}

model IgnoredEmail {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  email String @unique
}
